#!/usr/bin/env bash
[[ "${DEBUG,,}" == "true" ]] && set -x

#ENVS SUPPORTED:
# UNION_USER
# RCLONE_DEFAULT_OPTIONS
# RCLONE_MOUNT_#
# RCLONE_MOUNT_#_OPTIONS

###ENVS###
#UNION_USER="${UNION_MOUNT_USER:-nobody}"
#UNION_GROUP="${UNION_MOUNT_GROUP:-nogroup}"
#UNION_DEFAULT_OPTIONS="${UNION_MOUNT_DEFAULT_OPTIONS:-atomic_o_trunc,auto_cache,kernel_cache,big_writes,splice_move,splice_read,splice_write,allow_other,use_ino,max_readahead=64M,moveonenospc=true,category.action=all,category.create=ff,category.search=ff,func.getattr=newest}"
UNION_DEFAULT_OPTIONS="${UNION_MOUNT_DEFAULT_OPTIONS:-atomic_o_trunc,auto_cache,kernel_cache,big_writes,splice_move,splice_read,splice_write,allow_other,use_ino,moveonenospc=true,category.action=all,category.create=ff,category.search=ff,func.getattr=newest}"

###VARS###
PREFIX="UNION"
NOUN="MOUNT"
SERVICES_DIR="/etc/service"

###CODE###

#Don't continue if mounts are not setup
[[ -z $(eval "echo \$${PREFIX}_${NOUN}_0") ]] && exit 0

COUNT=0
while [[ true ]]; do

    #########################
    ## START STANDARD LOOP ##
    #########################
    SUBJECT_NAME="\$${PREFIX}_${NOUN}_${COUNT}"
    SUBJECT=$(eval "echo ${SUBJECT_NAME}")
    OPTIONS=$(eval "echo ${SUBJECT_NAME}_OPTIONS")
    DEFAULT_OPTIONS=$(eval "echo \$${PREFIX}_DEFAULT_OPTIONS")

    #Increment count here so continue cmds later on don't cause infinite loop
    ((COUNT++))

    [[ -z "${SUBJECT}" ]] && break

    IFS='|' read -r FIRST SECOND <<< "${SUBJECT}"

    [[ -z "${FIRST}" ]] && echo "Missing first setting for (${SUBJECT_NAME}). Skipping." && continue

    [[ -z "${SECOND}" ]] && echo "Missing second setting for (${SUBJECT_NAME}). Skipping." && continue

    [[ -z "${OPTIONS}" ]] && OPTIONS="-o ${DEFAULT_OPTIONS}" || OPTIONS="-o ${OPTIONS}"

    SERVICE_NAME=${SUBJECT_NAME:1}
    SERVICE_DIR=${SERVICES_DIR}/${SERVICE_NAME}
    RUN_PATH=${SERVICE_DIR}/run

    #Create service directory
    [[ ! -e ${SERVICE_DIR} ]] && { mkdir -p ${SERVICE_DIR} || { echo "ERROR: Cannot create service directory: ${SERVICE_DIR}. Skipping." && continue; }; }

    #######################
    ## END STANDARD LOOP ##
    #######################

    [[ ! -e ${RUN_PATH} ]] && { cat << EOF > ${RUN_PATH}
#!/usr/bin/env bash
[[ "${DEBUG}" == "true" ]] && set -x && DEBUG_OPTIONS="-d "

IFS=':' read -a DIRS <<< "${FIRST}"

for DIR in "\${DIRS[@]}"; do
  [[ ! -e \${DIR} ]] && echo "Source dir does not exist (\${DIR}). Exiting." && exit 1
done

[[ ! -e ${SECOND} ]] && mkdir -p ${SECOND}

trap '{ /bin/fusermount -u -z -q "${SECOND}"; }' INT TERM KILL QUIT EXIT

mergerfs -f \${DEBUG_OPTIONS} ${OPTIONS} "${FIRST}" "${SECOND}" &

wait \$!

EOF
    chmod +x ${RUN_PATH}; }

done;

